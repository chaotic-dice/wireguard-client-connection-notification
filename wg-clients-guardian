#!/bin/bash
# This script is licensed under MIT License.
# Credits: This script is forked and slightly modified from: https://github.com/alfiosalanitri/wireguard-client-connection-notification

# config variables
readonly CURRENT_PATH=$(pwd)
readonly CLIENTS_DIRECTORY="$CURRENT_PATH/clients"
readonly NOW=$(date +%s)

# after X minutes the clients will be considered disconnected
readonly TIMEOUT=5

# check if wireguard exists
if ! command -v wg &> /dev/null; then
	printf "Sorry, but wireguard is required. Install it and try again.\n"
	exit 1;
fi
readonly WIREGUARD_CLIENTS=$(wg show wg0 dump | tail -n +2) # remove first line from list
if [ "" == "$WIREGUARD_CLIENTS" ]; then
	printf "No wireguard clients.\n"
	exit 1
fi

# check if the user passed in the Gotify config file and that the file exists
if [ ! "$1" ]; then
	printf "The config file with Gotify info is required.\n"
	exit 1
fi
if [ ! -f "$1" ]; then
	printf "The Gotify config file doesn't exist.\n"
	exit 1
fi
readonly GOTIFY_HOST=$(awk -F'=' '/^host=/ { print $2}' $1)
readonly GOTIFY_TOKEN=$(awk -F'=' '/^token=/ { print $2}' $1)

while IFS= read -r LINE; do
	PUBLIC_KEY=$(awk '{ print $1 }' <<< "$LINE")
	REMOTE_IP=$(awk '{ print $3 }' <<< "$LINE" | awk -F':' '{print $1}')
	LAST_SEEN=$(awk '{ print $5 }' <<< "$LINE")
	CLIENT_NAME=$(grep -R "$PUBLIC_KEY" /etc/wireguard/keys/ | awk -F"/etc/wireguard/keys/|_pub:" '{print $2}' | sed -e 's./..g')
	CLIENT_FILE="$CLIENTS_DIRECTORY/$CLIENT_NAME.txt"

	# create the client file if it does not exist.
	if [ ! -f "$CLIENT_FILE" ]; then
		echo "offline" > $CLIENT_FILE
	fi	

	# setup notification variable
	send_notification="no"

	# last client status
	LAST_CONNECTION_STATUS=$(cat $CLIENT_FILE)

	# elapsed seconds from last connection
	LAST_SEEN_SECONDS=$(date -d @"$LAST_SEEN" '+%s')
	
	# if the user is online
	if [ "$LAST_SEEN" -ne 0 ]; then

		# elapsed minutes from last connection
		LAST_SEEN_ELAPSED_MINUTES=$((10#$(($NOW - $LAST_SEEN_SECONDS)) / 60))

		# if the previous state was online and the elapsed minutes are greater than TIMEOUT, the user is offline
		if [ $LAST_SEEN_ELAPSED_MINUTES -gt $TIMEOUT ] && [ "online" == $LAST_CONNECTION_STATUS ]; then
			echo "offline" > $CLIENT_FILE
			send_notification="disconnected"
		# if the previous state was offline and the elapsed minutes are lower than timout, the user is online
		elif [ $LAST_SEEN_ELAPSED_MINUTES -le $TIMEOUT ] && [ "offline" == $LAST_CONNECTION_STATUS ]; then
			echo "online" > $CLIENT_FILE
			send_notification="connected"
		fi
	else
		# if the user is offline
		if [ "offline" != "$LAST_CONNECTION_STATUS" ]; then
			echo "offline" > $CLIENT_FILE
			send_notification="disconnected"
		fi
	fi

	# send notification to Gotify
	if [ "no" != "$send_notification" ]; then
		printf "The client %s is %s\n" $CLIENT_NAME $send_notification
		readonly MESSAGE="Wireguard: $CLIENT_NAME $send_notification from ip address $REMOTE_IP"
		curl -X POST "${GOTIFY_HOST}/message" -H  "accept: application/json" -H  "Content-Type: application/json" -H "Authorization: Bearer ${GOTIFY_TOKEN}" -d '{  "message": "'"$MESSAGE"'",  "priority": 2,  "title": "VPN Activity"}'
	else
		printf "The client %s is %s, no notification will be sent.\n" $CLIENT_NAME $(cat $CLIENT_FILE)
	fi

done <<< "$WIREGUARD_CLIENTS"

exit 0
